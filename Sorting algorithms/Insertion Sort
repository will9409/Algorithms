#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 10000
#define SWAP(x, y, t) ( (t)=(x), (x)=(y), (y)=(t) )

int list[MAX_SIZE];
int n;

void insertion_sort(int list[], int n)
{
	int i, j, key;
	for(i=1; i<n; i++){
		key = list[i]; // key == current data which will be inserted
		for(j=i-1; j>=0 && list[j]>key; j--) // find insertion location
			list[j+1] = list[j];
	list[j+1] = key;
	}
}

void main()
{
	int i;
	n = MAX_SIZE;
	for(i=0; i<n; i++)// 난수 생성 및 출력
		list[i] = rand()%n;// 난수 발생 범위 0~n
	insertion_sort(list, n);// 선택 정렬 호출
	for(i=0; i<n; i++)
		printf("%d\n", list[i]);// 정렬 결과 출력
}


/*********************************************************************************/
//performance analysis
/*

Best case = O(n)     -> already sorted, compare time: n-1

Worst case = O(n^2)  -> sorted as reversed order
>> compare :(i = 1; n-1; i++)sigma i = n(n - 1)/2 = O(n^2)
>> move    :n(n - 1)/2 + 2(n - 1) = O(n^2)

Average case = O(n^2)

**
highly effective when data are already sorted

*/
