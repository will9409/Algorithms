void merge_sort(int s, int e, int A[])
{
    if( s == e )       // degenerate case
        return;
    int m = ( s + e ) / 2;
    merge_sort( s, m, A);   //divide
    merge_sort( m+1, e, A);  //divide
    merge( s, m, m+1, e, A);  //merge
}    

void merge(int ls, int le, int rs, int re, int A[])
{
    int lptr = ls;
    int rptr = rs;
    int bptr = 0;
    int *B = (int *)calloc((le - ls)+(re - rs)+2, sizeof(int));
    
    while( lptr <= le && rptr <= re )
    {
        if( A[lptr] < A[rptr] )
            B[bptr++] = A[lptr++];
        else
            B[bptr++] = A[rptr++];
    }
    if ( lptr > le)
        for( int i = rptr; i <= re; i++)
            B[bptr++] = A[i];
    if ( rptr > re )
        for( int i = lptr; i <= re; i++)
            B[bptr++] = A[i];
     A = B;
 }
 
/*********************************************************************************/
//performance analysis
/*

T(n) = 2T(n/2)+cn    n > 1
             a       n = 1

T(n) = an + cnlog n

O(n log n)

*/
 
