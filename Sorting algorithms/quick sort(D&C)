void quick_sort(int s, int e, int A[])
{
    if( s >= e )
        return;
        
    int m = partition(s, e, A);
    quick_sort(s, m-1, A);
    quick_sort(m+1, e, A);
}

int partition(int s, int e, int A[])
{
    int pivot, left, right;
    left = s+1;
    right = e;
    pivot = A[s];
    while(left <= right)
    {
        while((A[right] >= pivot) && (left <= right))
            right--;
        while((A[left] <= pivot) && (left <= right))
            left++;
        
        if( left <= right )
            swap( A[left], A[right] );
     }
     swap( A[right], A[s] );
     return right;
}


/*********************************************************************************/
//performance analysis
/*

T(n) =  (n+1) + 1/n sigma (T(k-1) + T(n-k))         1<=k<=n

best case = O(n log n)
worst case = O(n^2)
average case = O(n log n)

*/
